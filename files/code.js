//reading for fixing repeated events bug
//https://github.com/angular-ui/ui-calendar/issues/99

//https://facundoolano.wordpress.com/2014/10/11/better-authentication-for-socket-io-no-query-strings/
/*=========================================================================================================*/
var app = angular.module('myCalendarApp', ['ui.calendar','ngCookies']);

/*app.run(['$rootScope','$location', '$routeParams', function($rootScope, $location, $routeParams) {
    if (!window.console) window.console = {}; 
    if (!window.console.log) window.console.log = function () { };
    
  }]);*/

app.factory("user",function(){
        return {};
});


app.controller('CalendarCtrl',function($scope, $compile, uiCalendarConfig, $http, $cookieStore) {
//app.controller('CalendarCtrl',function($scope, $http) {
     
    var date = new Date();
    var d = date.getDate();
    var m = date.getMonth();
    var y = date.getFullYear();
    var currentView = "month";
     
    var auth = $cookieStore.get("username");
    if(auth != undefined && auth != ""){
            $scope.LoggedIn = "1";
            console.log("success!");
        }
        else{
            console.log("failure!");
        }
    //events displays and renders out events to the calendar.
    //The version with an array is temporary and is only to be used in testing purposes
    
    //Needed:
    //title: Displays event name
    //start: Used to render when the event happens
    
    //Other options:
    //end: creates an end date for multi day events
    //id: 
    //allday: Makes the event available all day
    //url: creates a link 
    //dow: makes days repeat weekly. 0-6, with 0=Sunday, 6=Sat
    //start:/end:  new Date(y+2, m+2, d + 2, 19, 0), will create an event that starts/ends 2 years, 2months, and 2 days from now
    
    $scope.events = [
      
        
        
    ];
    

     
     
    //with this you can handle the events that generated by clicking the day(empty spot) in the calendar
    $scope.dayClick = function( event, date, allDay, jsEvent, view ){
        $scope.$apply(function(){
          $scope.alertMessage = ('Day Clicked ' + date);
        });
    };
     
     
    //with this you can handle the events that generated by droping any event to different position in the calendar
     $scope.alertOnDrop = function(event, dayDelta, minuteDelta, allDay, revertFunc, jsEvent, ui, view){
        $scope.$apply(function(){
          $scope.alertMessage = ('Event Droped to make dayDelta ' + dayDelta);
        });
    };
     
     
    //with this you can handle the events that generated by resizing any event to different position in the calendar
    $scope.alertOnResize = function(event, dayDelta, minuteDelta, revertFunc, jsEvent, ui, view ){
        $scope.$apply(function(){
          $scope.alertMessage = ('Event Resized to make dayDelta ' + minuteDelta);
        });
    };
     
    
    //this code will add new event and remove the event present on index
    //you can call it explicitly in any method
      $scope.events.push({
        title: 'New Task',
        start: new Date(y, m, 28),
        end: new Date(y, m, 29),
        className: ['newtask']
      });
     
    $scope.events.splice('index',1);
     
     
    //with this you can handle the click on the events
    $scope.eventClick = function(event){           
        $scope.$apply(function(){
          $scope.alertMessage = (event.title + ' is clicked');
        });
    };
     
     
    //with this you can handle the events that generated by each page render process
    $scope.renderView = function(view){    
        var date = new Date(view.calendar.getDate());
        $scope.currentDate = date.toDateString();
        $scope.$apply(function(){
          $scope.alertMessage = ('Page render with date '+ $scope.currentDate);
        });
    };
     
 
    //with this you can handle the events that generated when we change the view i.e. Month, Week and Day
    $scope.changeView = function(view,calendar) {
        currentView = view;
        calendar.fullCalendar('changeView', view);
        $scope.$apply(function(){
          $scope.alertMessage = ('You are looking at '+ currentView);
        });
    };
     
     
    /* config object */
    $scope.uiConfig = {
      calendar:{
        //height: 550,
        editable: false,
        header:{
         //left: 'month basicWeek basicDay agendaWeek agendaDay',
          left: 'month agendaWeek agendaDay',    
          center: 'title',
          right: 'today prev,next'
        },
        dayClick: $scope.dayClick,
        eventDrop: $scope.alertOnDrop,
        eventResize: $scope.alertOnResize,
        eventClick: $scope.eventClick,
        viewRender: $scope.renderView,
        timezone: 'local',
        //timezone: false,
        eventLimit: true, // allow "more" link when too many events
        //addEventSource: $scope.eventSources
      }    
    };
     
    /* event sources array*/
    /*$scope.eventSources = [$scope.events, $scope.eventSource, $scope.eventsF];*/
    
    $scope.eventSources = [/*$scope.events*/{url:'/DB3/'}];
});

/*=========================================================================================================*/
var app2 = angular.module('myScheduleApp', ['ngRoute', 'ngMessages', 'checklist-model', 'ui.calendar', 'remoteValidation', 'ngCookies']);


app2.run(['$rootScope','$location', '$routeParams', function($rootScope, $location, $routeParams) {
    if (!window.console) window.console = {}; 
    if (!window.console.log) window.console.log = function () { };
    
  }]);

//Legacy authentication carrying
//replacing with cookies if possible.
app2.factory("user",function(){
        return {};
});

app2.factory('socket', function ($rootScope) {
  var socket = io.connect();
  return {
    on: function (eventName, callback) {
      socket.on(eventName, function () {  
        var args = arguments;
        $rootScope.$apply(function () {
          callback.apply(socket, args);
        });
      });
    },
    emit: function (eventName, data, callback) {
      socket.emit(eventName, data, function () {
        var args = arguments;
        $rootScope.$apply(function () {
          if (callback) {
            callback.apply(socket, args);
          }
        });
      })
    },
      removeAllListeners: function (eventName, callback) {
          socket.removeAllListeners(eventName, function() {
              var args = arguments;
              $rootScope.$apply(function () {
                callback.apply(socket, args);
              });
          }); 
      }
  };
});



//used for datepicker and date inserting
app2.directive('datepickerPopup', function (dateFilter, $parse){
    return {
        restrict: 'EAC',
        require: '?ngModel',
        link: function(scope, element, attr, ngModel,ctrl) {
            ngModel.$parsers.push(function(viewValue){
                return dateFilter(viewValue, 'yyyy-MM-dd');
    });
    }
  }
});

app2.directive('tooltip', function(){
    return {
        restrict: 'A',
        link: function(scope, element, attrs){
            $(element).hover(function(){
                // on mouseenter
                $(element).tooltip('show');
            }, function(){
                // on mouseleave
                $(element).tooltip('hide');
            });
        }
    };
});

//http://stackoverflow.com/questions/20267967/create-hoverable-popover-using-angular-ui-bootstrap
app2.directive('hoverablePopover', function ($rootScope, $timeout, $popover) {
    return {
        restrict: "A",
        link: function (scope, element, attrs) {

            element.bind('mouseenter', function (e) {
                $timeout(function () {
                    if (!scope.insidePopover) {

                        scope.popover.show();
                        scope.attachEventsToPopoverContent();
                    }
                }, 200);
            });

            element.bind('mouseout', function (e) {
                $timeout(function () {
                    if (!scope.insidePopover) {

                        scope.popover.hide();
                    }
                }, 400);
            });

        },
        controller: function ($scope, $element, $attrs) {

            //The $attrs will server as the options to the $popover.
            //We also need to pass the scope so that scope expressions are supported in the  popover attributes
            //like title and content.
            $attrs.scope = $scope;
            var popover = $popover($element, $attrs);
            $scope.popover = popover;
            $scope.insidePopover = false;

            $scope.attachEventsToPopoverContent = function () {

                $($scope.popover.$element).on('mouseenter', function () {

                    $scope.insidePopover = true;

                });
                $($scope.popover.$element).on('mouseleave', function () {

                    $scope.insidePopover = false;
                    $scope.popover.hide();

                });
            };
        }
    };
});

//defines the rules and data available to the web page
//more efficient use of the server
app2.controller('data_get', function($scope, $http, socket, $location, $cookieStore){
//var auth = $location.search().auth;
var id = $location.search().id;
var auth = $cookieStore.get("username");
console.log("User is: "+$cookieStore.get("username"));
var repeat = $location.search().rep;
//$scope.WR = "";

    if($scope.Regischeck != "0")
        {
            $scope.Show3 = "1";
        }
    else
        {
            $scope.Show3 = "";
        }
    
    if(auth != undefined && auth != ""){
        $scope.LoggedIn = "1";
    }
    
$scope.redir = function(schedule){socket.emit('check_sched', schedule)};    
$scope.addSchedule = function(schedule){socket.emit('add_schedule', schedule), 
//defines a cookie that stores the most recent schedule for less problematic consistancy.
        $cookieStore.remove("tempsched.eTitle");
        $cookieStore.remove("tempsched.eStart");
        $cookieStore.remove("tempsched.eEnd");
        $cookieStore.remove("tempsched.prepStart");
        $cookieStore.remove("tempsched.TearDownEnd");
        $cookieStore.remove("tempsched.fstart");
        $cookieStore.remove("tempsched.fend");
        $cookieStore.remove("tempsched.fprep");
        $cookieStore.remove("tempsched.ftear");
        $cookieStore.remove("tempsched.eAllDay");
        $cookieStore.remove("tempsched.Room");
        $cookieStore.remove("tempsched.ContName");
        $cookieStore.remove("tempsched.ePhone");
        $cookieStore.remove("tempsched.ContMail");
        $cookieStore.remove("tempsched.Age");
        $cookieStore.remove("tempsched.eAttend");
        $cookieStore.remove("tempsched.eSpeaker");
        $cookieStore.remove("tempsched.ePlaceholder");
        $cookieStore.remove("tempsched.ePatron");
        $cookieStore.remove("tempsched.eDescription");
        $cookieStore.remove("tempsched.eEquipment");
        $cookieStore.remove("tempsched.eComment");
        $cookieStore.remove("tempsched.Location");
        $cookieStore.remove("tempsched.Building");
        $cookieStore.remove("tempsched.eMaxAtt");
        $cookieStore.remove("tempsched.eEquipment");
        $cookieStore.remove("tempsched.eOptionLoc");
        $cookieStore.remove("tempsched.eId");
        $cookieStore.remove("tempsched.eStH");
        $cookieStore.remove("tempsched.eStM");
        $cookieStore.remove("tempsched.eEnH");
        $cookieStore.remove("tempsched.eEnM");
        $cookieStore.remove("tempsched.eEnAmPm");
        $cookieStore.remove("tempsched.ePrH");
        $cookieStore.remove("tempsched.ePrM");
        $cookieStore.remove("tempsched.ePrAmPm");
        $cookieStore.remove("tempsched.eTdH");
        $cookieStore.remove("tempsched.eTdM");
        $cookieStore.remove("tempsched.eTdAmPm");
        $cookieStore.remove("tempsched.eStDay");
        $cookieStore.remove("tempsched.eStMonth");
        $cookieStore.remove("tempsched.eStYear");
        $cookieStore.remove("tempsched.eStAmPm");
        $cookieStore.remove("tempsched.Chairs");
        $cookieStore.remove("tempsched.eRegisCheck");
                                        
        $cookieStore.put("tempsched.eTitle", $scope.schedule.eTitle);
        $cookieStore.put("tempsched.eStart", $scope.schedule.eStart);
        $cookieStore.put("tempsched.eEnd", $scope.schedule.eEnd);
        $cookieStore.put("tempsched.prepStart", $scope.schedule.prepStart);
        $cookieStore.put("tempsched.TearDownEnd", $scope.schedule.TearDownEnd);
        $cookieStore.put("tempsched.fstart", $scope.schedule.fstart);
        $cookieStore.put("tempsched.fend", $scope.schedule.fend);
        $cookieStore.put("tempsched.fprep", $scope.schedule.fprep);
        $cookieStore.put("tempsched.ftear", $scope.schedule.ftear);
        $cookieStore.put("tempsched.eAllDay", $scope.schedule.eAllDay);
        $cookieStore.put("tempsched.Room", $scope.schedule.Room);
        $cookieStore.put("tempsched.ContName", $scope.schedule.ContName);
        $cookieStore.put("tempsched.ePhone", $scope.schedule.ePhone);
        $cookieStore.put("tempsched.ContMail", $scope.schedule.ContMail);
        $cookieStore.put("tempsched.Age", $scope.schedule.Age);
        $cookieStore.put("tempsched.eAttend", $scope.schedule.eAttend);
        $cookieStore.put("tempsched.eSpeaker", $scope.schedule.eSpeaker);
        $cookieStore.put("tempsched.ePlaceholder", $scope.schedule.ePlaceholder);
        $cookieStore.put("tempsched.ePatron", $scope.schedule.ePatron);
        $cookieStore.put("tempsched.eDescription", $scope.schedule.eDescription);
        $cookieStore.put("tempsched.eEquipment", $scope.schedule.eEquipment);
        $cookieStore.put("tempsched.eComment", $scope.schedule.eComment);
        $cookieStore.put("tempsched.Location", $scope.schedule.Location);
        $cookieStore.put("tempsched.Building", $scope.schedule.Building);
        $cookieStore.put("tempsched.eMaxAtt", $scope.schedule.eMaxAtt);
        $cookieStore.put("tempsched.eEquipment", $scope.schedule.eEquipment);
        $cookieStore.put("tempsched.eOptionLoc", $scope.schedule.eOptionLoc);
        $cookieStore.put("tempsched.eId", $scope.schedule.eId);
        $cookieStore.put("tempsched.eStH", $scope.schedule.eStH);
        $cookieStore.put("tempsched.eStM", $scope.schedule.eStM);
        $cookieStore.put("tempsched.eEnH", $scope.schedule.eEnH);
        $cookieStore.put("tempsched.eEnM", $scope.schedule.eEnM);
        $cookieStore.put("tempsched.eEnAmPm", $scope.schedule.eEnAmPm);
        $cookieStore.put("tempsched.ePrH", $scope.schedule.ePrH);
        $cookieStore.put("tempsched.ePrM", $scope.schedule.ePrM);
        $cookieStore.put("tempsched.ePrAmPm", $scope.schedule.ePrAmPm);
        $cookieStore.put("tempsched.eTdH", $scope.schedule.eTdH);
        $cookieStore.put("tempsched.eTdM", $scope.schedule.eTdM);
        $cookieStore.put("tempsched.eTdAmPm", $scope.schedule.eTdAmPm);
        $cookieStore.put("tempsched.eStDay", $scope.schedule.eStDay);
        $cookieStore.put("tempsched.eStMonth", $scope.schedule.eStMonth);
        $cookieStore.put("tempsched.eStYear", $scope.schedule.eStYear);
        $cookieStore.put("tempsched.eStAmPm", $scope.schedule.eStAmPm);
        $cookieStore.put("tempsched.Chairs", $scope.schedule.Chairs);
        $cookieStore.put("tempsched.eRegisCheck", $scope.schedule.RegisCheck);
                                        
};
    
$scope.checkTime = function(schedule){socket.emit('check_time', schedule)};
    
    socket.on('available', function(res){
     if(res == "Time is available")
            {
                console.log("unhiding");
                $scope.unhide = "1";
            }
        });
    
console.log(auth);    
    if(id != undefined && id != "")
        {
            console.log(id);
            $http.get('/event/'+id).success(function(data)
            
    {   
         if (auth != undefined){
    $scope.schedule.LoggedIn = "Logout";
        }
    else{
        //$scope.schedule.LoggedIn = "";
    }
        //$scope.schedule.show = "1";
        $scope.schedule.eTitle=data.title;
        $scope.schedule.eStart=data.start;
        $scope.schedule.eEnd=data.end;
        $scope.schedule.prepStart=data.prepStart;
        $scope.schedule.TearDownEnd=data.TearDownEnd;
        //$scope.schedule.fstart=data.fstart;
        //$scope.schedule.fend=data.fend;
        //$scope.schedule.fprep=data.fprep;
        //$scope.schedule.ftear=data.ftear;
        /*$scope.schedule.eStart=data.fstart;
        $scope.schedule.eStart=data.fstart;
        $scope.schedule.eStart=data.fstart;*/
        $scope.schedule.eAllDay=data.allDay;
        $scope.schedule.Room=data.Location_Room;
        $scope.schedule.ContName=data.ContName;
        $scope.schedule.ePhone=data.ePhone;
        $scope.schedule.ContMail=data.ContMail;
        $scope.schedule.Age=data.Age;
        $scope.schedule.eAttend=data.Attendance;
        $scope.schedule.eSpeaker="0";//data.eSpeaker;
        $scope.schedule.ePlaceholder=data.Placeholder;//data.Placeholder;
        $scope.schedule.ePatron="false";//data.Patron;
        $scope.schedule.eDescription=data.eDescription;
        $scope.schedule.eEquipment=data.Equipment;
        $scope.schedule.eComment=data.Comment;
        $scope.schedule.Location=data.Location_Room;
        $scope.schedule.Building=data.Building;
        $scope.schedule.CheckLy=data.CheckLy;
        $scope.schedule.CheckJ=data.CheckJ;
        $scope.schedule.CheckLak=data.CheckLak;
        $scope.schedule.eMaxAtt=data.AttendCap;
        $scope.schedule.eEquipment=data.Equipment;
        $scope.schedule.eOptionLoc=data.OtherDesc;
        $scope.schedule.eId=data.id;
        $scope.schedule.eEditor=auth;
        $scope.x = data;
        //console.log(data.fstart);
    });
        }else if(id == undefined || id == ""){
//$scope.user = user;
//$scope.user.Auth = auth;
//$cookieStore.put("username", authUrl);
 if (auth != undefined){
    $scope.LoggedIn = "Logout";
        }
    else{
        //$scope.LoggedIn = "";
    }
        
console.log("There was no ID");
    if(repeat != undefined && repeat != "" && $cookieStore.get("tempsched.eTitle") != undefined && $cookieStore.get("tempsched.eTitle") != "")
    {
         console.log("1: "+$cookieStore.get("tempsched.ContMail"));
         console.log("2: "+$cookieStore.get("tempsched.eTitle"));
         console.log("3: "+$cookieStore.get("tempsched.eStH"));
         console.log("4: "+$cookieStore.get("tempsched.eStM"));
         console.log("5: "+$cookieStore.get("tempsched.eEnH"));
         console.log("6: "+$cookieStore.get("tempsched.eEnM"));
         console.log("7: "+$cookieStore.get("tempsched.eEnAmPm"));
         console.log("8: "+$cookieStore.get("tempsched.ePrH"));
         console.log("9: "+$cookieStore.get("tempsched.ePrM"));
         console.log("10: "+$cookieStore.get("tempsched.ePrAmPm"));
         console.log("11: "+$cookieStore.get("tempsched.eTdH"));
         console.log("12: "+$cookieStore.get("tempsched.eTdM"));
         console.log("13: "+$cookieStore.get("tempsched.eTdAmPm"));
         console.log("14: "+$cookieStore.get("tempsched.eStDay"));
         console.log("15: "+$cookieStore.get("tempsched.eStMonth"));
         console.log("16: "+$cookieStore.get("tempsched.eStYear"));
         console.log("17: "+$cookieStore.get("tempsched.eStAmPm"));
         console.log("18: "+$cookieStore.get("tempsched.eAllDay"));
         console.log("19: "+$cookieStore.get("tempsched.Room"));
         console.log("20: "+$cookieStore.get("tempsched.ContName"));
         console.log("21: "+$cookieStore.get("tempsched.ePhone"));
        //WHAT IS CONTMAIL'S PROBLEM!?
         console.log("22: "+$cookieStore.get("tempsched.ContMail"));
         console.log("23: "+$cookieStore.get("tempsched.Age"));
         console.log("24: "+$cookieStore.get("tempsched.eAttend"));
         console.log("25: "+$cookieStore.get("tempsched.eSpeaker"));
         console.log("26: "+$cookieStore.get("tempsched.ePlaceholder"));
         console.log("27: "+$cookieStore.get("tempsched.eDescription"));
         console.log("28: "+$cookieStore.get("tempsched.eEquipment"));
         console.log("29: "+$cookieStore.get("tempsched.eComment"));
         console.log("30: "+$cookieStore.get("tempsched.Building"));
         console.log("31: "+$cookieStore.get("tempsched.eMaxAtt"));
         console.log("32: "+$cookieStore.get("tempsched.eEquipment"));
        
        
        $scope.schedule = {
        eTitle: $cookieStore.get("tempsched.eTitle"),
        eStH: $cookieStore.get("tempsched.eStH"),
        eStM: $cookieStore.get("tempsched.eStM"),
        eEnHeStM: $cookieStore.get("tempsched.eEnHeStM"),
        eEnH: $cookieStore.get("tempsched.eEnH"),
        eEnM: $cookieStore.get("tempsched.eEnM"),
        eEnAmPm: $cookieStore.get("tempsched.eEnAmPm"),
        ePrH: $cookieStore.get("tempsched.ePrH"),
        ePrM: $cookieStore.get("tempsched.ePrM"),
        ePrAmPm: $cookieStore.get("tempsched.ePrAmPm"),
        eTdH: $cookieStore.get("tempsched.eTdH"),
        eTdM: $cookieStore.get("tempsched.eTdM"),
        eTdAmPm: $cookieStore.get("tempsched.eTdAmPm"),
        eStDay: $cookieStore.get("tempsched.eStDay"),
        eStMonth: $cookieStore.get("tempsched.eStMonth"),
        eStYear: $cookieStore.get("tempsched.eStYear"),
        eStAmPm: $cookieStore.get("tempsched.eStAmPm"),
       /* eStart: $cookieStore.get("tempsched.eStart"),
        eEnd: $cookieStore.get("tempsched.eEnd"),
        prepStart: $cookieStore.get("tempsched.prepStart"),
        TearDownEnd: $cookieStore.get("tempsched.TearDownEnd"),*/
        //fstart: $cookieStore.get("tempsched.fstart"),
        //fend: $cookieStore.get("tempsched.fend"),
        //fprep: $cookieStore.get("tempsched.fprep"),
        //ftear: $cookieStore.get("tempsched.ftear"),
        eAllDay: $cookieStore.get("tempsched.eAllDay"),
        Room: $cookieStore.get("tempsched.Room"),
        ContName: $cookieStore.get("tempsched.ContName"),
        ePhone: $cookieStore.get("tempsched.ePhone"),
        //WHAT IS CONTMAIL'S PROBLEM!?
        ContMail: $cookieStore.get("tempsched.ContMail"),
        Age: $cookieStore.get("tempsched.Age"),
        eAttend: $cookieStore.get("tempsched.eAttend"),
        eSpeaker: $cookieStore.get("tempsched.eSpeaker"),
        ePlaceholder: $cookieStore.get("tempsched.ePlaceholder"),
        //ePatron: $cookieStore.get("tempsched.ePatron"),
        eDescription: $cookieStore.get("tempsched.eDescription"),
        eEquipment: $cookieStore.get("tempsched.eEquipment"),
        eComment: $cookieStore.get("tempsched.eComment"),
        //Location: $cookieStore.get("tempsched.Location"),
        Building: $cookieStore.get("tempsched.Building"),
        eMaxAtt: $cookieStore.get("tempsched.eMaxAtt"),
        eEquipment: $cookieStore.get("tempsched.eEquipment"),
        eEditor: auth,
        //RegisCheck: $cookieStore.get("tempsched.eRegisCheck")
        //eOptionLoc: $cookieStore.get("tempsched.eOptionLoc"),
        //eId: $cookieStore.get("tempsched.eId")
        }
    }else{
        //$scope.redirect = function(){window.location = "/MS.html";};    
$http.get('/DB/').success(function(data){$scope.data=data;});        
        
    $scope.schedule = {
    LoggedIn: $scope.LoggedIn,
    eAllDay: "false",
    eSpeaker: "false",
    caseId: 0,
    //eEditor: user.Auth
    eEditor: auth,
    ePlaceholder:0
        
    };

}
        }

    
socket.on('available', function(res){
    $scope.resu = res;
     
});

    
});

app2.controller('data_update', function($scope, $http, socket){
    //(\d\d\d\d)+(-)+(\d\d)+(-)+(\d\d)
$scope.updateSchedule = function(schedule){socket.emit('update_schedule', schedule)};
$scope.checkTime = function(schedule){socket.emit('check_time', schedule)};
$scope.cookietest = $cookieStore.get("username");
//$scope.redirect = function(){window.location = "/MS.html";};    
$http.get('/DB/').success(function(data){$scope.data=data;});
    
    $scope.schedule = { 
    eAllDay: "false",
    eSpeaker: "false",
    ePlaceholder: "false",
    ePatron: "false",
    caseId: 0,
        
    };
    
socket.on('available', function(res){
    $scope.resu = res;
});
 
    
});

app2.controller('Login', function($scope, $http, socket, $location, $cookieStore){
    $scope.Login = function(lI){socket.emit('Login', lI); $cookieStore.put("username", lI.lUser); console.log("Logging: "+lI.lUser)};
    socket.on('LoginResp', function(res){$scope.resu = res;});
    $scope.redirect = function(){window.location('http://localhost/epl/eventkeeper/events/#/');};
    $scope.user = $cookieStore.get("username");
    if ($scope.user != "" && $scope.user != undefined)
    {
        $scope.show = "1";
        $scope.show2 = "1";
        $cookieStore.remove("username");
        $cookieStore.remove("tempsched.eTitle");
        $cookieStore.remove("tempsched.eStart");
        $cookieStore.remove("tempsched.eEnd");
        $cookieStore.remove("tempsched.prepStart");
        $cookieStore.remove("tempsched.TearDownEnd");
        $cookieStore.remove("tempsched.fstart");
        $cookieStore.remove("tempsched.fend");
        $cookieStore.remove("tempsched.fprep");
        $cookieStore.remove("tempsched.ftear");
        $cookieStore.remove("tempsched.eAllDay");
        $cookieStore.remove("tempsched.Room");
        $cookieStore.remove("tempsched.ContName");
        $cookieStore.remove("tempsched.ePhone");
        $cookieStore.remove("tempsched.ContMail");
        $cookieStore.remove("tempsched.Age");
        $cookieStore.remove("tempsched.eAttend");
        $cookieStore.remove("tempsched.eSpeaker");
        $cookieStore.remove("tempsched.ePlaceholder");
        $cookieStore.remove("tempsched.ePatron");
        $cookieStore.remove("tempsched.eDescription");
        $cookieStore.remove("tempsched.eEquipment");
        $cookieStore.remove("tempsched.eComment");
        $cookieStore.remove("tempsched.Location");
        $cookieStore.remove("tempsched.Building");
        $cookieStore.remove("tempsched.eMaxAtt");
        $cookieStore.remove("tempsched.eEquipment");
        $cookieStore.remove("tempsched.eOptionLoc");
        $cookieStore.remove("tempsched.eId");
        
    }
    else
        {
            $scope.show = "1";
            $scope.show2 = "";
        }
    
});

app2.controller('data_redir', function($scope, $http, socket, $location, $cookieStore){
    var id = $location.search().id;
    //var usera = $location.search().usera;
    $scope.user = $cookieStore.get("username");
   // $scope.user.Auth= usera;
    
 // at the bottom of your controller
var init = function () {
   // check if there is query in url
   // and fire search in case its value is not empty
    if($scope.user == undefined||$scope.user =="")
    {
        window.location='http://google.com';    
    }
    else
    {
        window.location='adschedule.html#/?id='+id;
    }
};
// and fire it after definition
init();
});

app2.controller('data_adget', function($scope, $http, socket, $location, $cookieStore){
$scope.updateSchedule = function(schedule){socket.emit('update_schedule', schedule)};
$scope.checkTime = function(schedule){socket.emit('check_time', schedule)};
$scope.user = $cookieStore.get("username");
var id = $location.search().id;
var auth = $scope.user;
$scope.Canceling = function(){window.location='http://localhost:3000/';}
$scope.cookietest = $cookieStore.get("username");
    var bill = $cookieStore.get("username");
console.log(bill);

    
    if($scope.Regischeck != "0")
        {
            $scope.Show3 = "1";
        }
    else
        {
            $scope.Show3 = "";
        }
    //window.location.hash = "/?id="+id;
    
//$scope.redirect = function(){window.location = "/MS.html";};  
//http://www.angulartutorial.net/2015/04/get-url-parameter-using-angular-js.html
$http.get('/event/'+id).success(function(data)
    {
        if ($scope.user != undefined){
            $scope.schedule.LoggedIn = "Logout";
            $scope.schedule.AUTH = $scope.user;
                }
            else{
                //$scope.schedule.LoggedIn = "";
        }
        $scope.schedule.show = "1";
        $scope.schedule.eTitle=data.title;
        $scope.schedule.eStart=data.start;
        $scope.schedule.eEnd=data.end;
        $scope.schedule.prepStart=data.prepStart;
        $scope.schedule.TearDownEnd=data.TearDownEnd;
        $scope.schedule.fstart=data.fstart;
        $scope.schedule.fend=data.fend;
        $scope.schedule.fprep=data.fprep;
        $scope.schedule.ftear=data.ftear;
        /*$scope.schedule.eStart=data.fstart;
        $scope.schedule.eStart=data.fstart;
        $scope.schedule.eStart=data.fstart;*/
        $scope.schedule.eAllDay=data.allDay;
        $scope.schedule.Room=data.Location_Room;
        $scope.schedule.ContName=data.ContName;
        $scope.schedule.ePhone=data.ePhone;
        $scope.schedule.ContMail=data.ContMail;
        $scope.schedule.Age=data.Age;
        $scope.schedule.eAttend=data.Attendance;
        $scope.schedule.eSpeaker="false";//data.eSpeaker;
        $scope.schedule.ePlaceholder=data.Placeholder;
        $scope.schedule.ePatron="false";//data.Patron;
        $scope.schedule.eDescription=data.eDescription;
        $scope.schedule.eEquipment=data.Equipment;
        $scope.schedule.eComment=data.Comment;
        $scope.schedule.Location=data.Location_Room;
        $scope.schedule.Building=data.Building;
        $scope.schedule.CheckLy=data.CheckLy;
        $scope.schedule.CheckJ=data.CheckJ;
        $scope.schedule.CheckLak=data.CheckLak;
        $scope.schedule.eMaxAtt=data.AttendCap;
        //$scope.schedule.eEquipment=data.Equipment;
        $scope.schedule.eOptionLoc=data.OtherDesc;
        $scope.schedule.eId=data.id;
        $scope.schedule.Chairs=data.Chairs;
        $scope.x = data;
        
        //2016-04-22T20:00:00.000Z
        var rEx = /(\d\d\d\d)-(\d\d)-(\d\d)T(\d\d):(\d\d)/;
        //var datTest = "2016-11-10 20:00:00";
        var datStart = data.updStart;
        console.log(data.start);
        var datEnd = data.updEnd;
        var datPrep = data.updPrepStart
        var datTear = data.updTearDownEnd
        var rStart = datStart.match(rEx);
        var rEnd = datEnd.match(rEx);
        var rTear = datTear.match(rEx);
        var rPrep = datPrep.match(rEx);

        $scope.schedule.eStYear= rStart[1];
        $scope.schedule.eStMonth= rStart[2];
        $scope.schedule.eStDay= rStart[3];
        //$scope.schedule.eStH = rStart[4];
        $scope.schedule.eStM = rStart[5];
        if (rStart[4] > 12)
            {
                var eStHFix = (Number(rStart[4])).toString();
                //var eStHTemp = (Number(eStHFix) - 12).toString();
                
                if(eStHFix > "12"){
                    var eStHTemp = (Number(eStHFix) - 12).toString();
                    $scope.schedule.eStAmPm = "12";
                    
                }else{
                    var eStHTemp = (Number(eStHFix) - 12).toString();
                    $scope.schedule.eStAmPm = "0";
                }
                
                if(eStHFix == "12")
                {
                    $scope.schedule.eStAmPm = "12";
                }
                
                //$scope.schedule.eStAmPm = "12";
                if(Number(eStHTemp) < 10)
                    {
                        $scope.schedule.eStH = "0"+eStHTemp;
                    }else{
                        $scope.schedule.eStH = eStHTemp;
                    }
                console.log("PRHFix: "+eStHFix);
                console.log("Final: "+eStHTemp);
            }else{
                
                //$scope.schedule.eStAmPm = "0";
                $scope.schedule.eStH = rStart[4];
            }
    
        $scope.schedule.eEnM = rEnd[5];
        if (rEnd[4] > 12)
            {
                var eEnHFix = (Number(rEnd[4])).toString();
                //var eEnHTemp = (Number(eEnHFix) - 12).toString();
                
                if(eEnHFix > "12"){
                    var eEnHTemp = (Number(eEnHFix) - 12).toString();
                    $scope.schedule.eEnAmPm = "12";
                    
                }else{
                    var eEnHTemp = (Number(eEnHFix) - 12).toString();
                    $scope.schedule.eEnAmPm = "0";
                }
                
                if(eEnHFix == "12")
                {
                    $scope.schedule.eEnAmPm = "12";
                }
                
                //$scope.schedule.eEnAmPm = "12";
                if(Number(eEnHTemp) < 10)
                    {
                        $scope.schedule.eEnH = "0"+eEnHTemp;
                    }else{
                        $scope.schedule.eEnH = eEnHTemp;
                    }
                console.log("PRHFix: "+eEnHFix);
                console.log("Final: "+eEnHTemp);
            }else{
                
                //$scope.schedule.eEnAmPm = "0";
                $scope.schedule.eEnH = rEnd[4];
            }
    
        $scope.schedule.ePrM = rPrep[5];
    
        if (rPrep[4] > 12)
            {
                var ePrHFix = (Number(rPrep[4])).toString();
                //var ePrHTemp = (Number(ePrHFix) - 12).toString();
                
                if(ePrHFix > "12"){
                    var ePrHTemp = (Number(ePrHFix) - 12).toString();
                    $scope.schedule.ePrAmPm = "12";
                    
                }else{
                    var ePrHTemp = (Number(ePrHFix) - 12).toString();
                    $scope.schedule.ePrAmPm = "0";
                }
                
                if(ePrHFix == "12")
                {
                    $scope.schedule.ePrAmPm = "12";
                }
                
                //$scope.schedule.ePrAmPm = "12";
                if(Number(ePrHTemp) < 10)
                    {
                        $scope.schedule.ePrH = "0"+ePrHTemp;
                    }else{
                        $scope.schedule.ePrH = ePrHTemp;
                    }
                console.log("PRHFix: "+ePrHFix);
                console.log("Final: "+ePrHTemp);
            }else{
                
                //$scope.schedule.ePrAmPm = "0";
                $scope.schedule.ePrH = rPrep[4];
            }
    
        $scope.schedule.eTdM = rTear[5];
        if (rTear[4] > 12)
            {
                var eTdHFix = (Number(rTear[4])).toString();
                //var eTdHTemp = (Number(eTdHFix) - 12).toString();
                
                if(eTdHFix > "12"){
                    var eTdHTemp = (Number(eTdHFix) - 12).toString();
                    $scope.schedule.eTdAmPm = "12";
                    
                }else{
                    var eTdHTemp = (Number(eTdHFix) - 12).toString();
                    $scope.schedule.eTdAmPm = "0";
                }
                
                if(eTdHFix == "12")
                {
                    $scope.schedule.eTdAmPm = "12";
                }
                
                //$scope.schedule.eTdAmPm = "12";
                if(Number(eTdHTemp) < 10)
                    {
                        $scope.schedule.eTdH = "0"+eTdHTemp;
                    }else{
                        $scope.schedule.eTdH = eTdHTemp;
                    }
                console.log("PRHFix: "+eTdHFix);
                console.log("Final: "+eTdHTemp);
            }else{
                
                //$scope.schedule.eTdAmPm = "0";
                $scope.schedule.eTdH = rTear[4];
            }
    });
    
socket.on('available', function(res){
    $scope.resu = res;
});

    
});

app2.controller('data_event', function($scope, $http, socket, $routeParams){  
//$scope.updticket = function(event){socket.emit('update_event', event)};
//$scope.redirect = function(){location.reload();};    
$http.get('/event/'+$routeParams.id).success(function(data){$scope.x=data;});
$scope.fEventId = $routeParams.id;
$scope.fEventSo = $http.get('/event/'+$routeParams.id).success(function(data){$scope.s=data;});
       
});

//needed for the datepicker functions
app2.controller('Datepicker', function ($scope) {
  $scope.today = function() {
    $scope.dt = new Date();
  };
  $scope.today();

  $scope.clear = function () {
    $scope.dt = null;
  };

  // Disable weekend selection
  $scope.disabled = function(date, mode) {
    return ( mode === 'day' && ( date.getDay() === 0 || date.getDay() === 6 ) );
  };

  $scope.toggleMin = function() {
    $scope.minDate = $scope.minDate ? null : new Date();
  };
  $scope.toggleMin();
  $scope.maxDate = new Date(2070, 5, 22);

  $scope.open = function($event) {
    $scope.status.opened = true;
  };

  $scope.dateOptions = {
    formatYear: 'yy',
    startingDay: 1
  };

  $scope.formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'];
  $scope.format = $scope.formats[0];

  $scope.status = {
    opened: false
  };

  var tomorrow = new Date();
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date();
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events =
    [
      {
        date: tomorrow,
        status: 'full'
      },
      {
        date: afterTomorrow,
        status: 'partially'
      }
    ];

  $scope.getDayClass = function(date, mode) {
    if (mode === 'day') {
      var dayToCheck = new Date(date).setHours(0,0,0,0);

      for (var i=0;i<$scope.events.length;i++){
        var currentDay = new Date($scope.events[i].date).setHours(0,0,0,0);

        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }

    return '';
  };
    
    
});


app2.controller('CalendarPrepCtrl',function($scope, $compile, uiCalendarConfig, $http) {
//app.controller('CalendarCtrl',function($scope, $http) {
     
    var date = new Date();
    var d = date.getDate();
    var m = date.getMonth();
    var y = date.getFullYear();
    var currentView = "month";

    $scope.events =[];
    $http.get('/cal/').success(function(data) {
        for(var i = 0; i < data.length; i++)
        {
            $scope.events[i] = {id:data[i].id, title: data[i].title,start: moment(data[i].prepStart), end: moment(data[i].TearDownEnd), allDay: (data[i].allDay == "true"), url: "#/?id="+data[i].id, dow: data[i].dow, stick: false};
        }
    });
   
    //to explicitly add events to the calendar
    //you can add the events in following ways
    
     
    //with this you can handle the events that generated by clicking the day(empty spot) in the calendar
    $scope.dayClick = function( event, date, allDay, jsEvent, view ){
        $scope.$apply(function(){
          $scope.alertMessage = ('Day Clicked ' + date);
        });
    };
     
     
    //with this you can handle the events that generated by droping any event to different position in the calendar
     $scope.alertOnDrop = function(event, dayDelta, minuteDelta, allDay, revertFunc, jsEvent, ui, view){
        $scope.$apply(function(){
          $scope.alertMessage = ('Event Droped to make dayDelta ' + dayDelta);
        });
    };
     
     
    //with this you can handle the events that generated by resizing any event to different position in the calendar
    $scope.alertOnResize = function(event, dayDelta, minuteDelta, revertFunc, jsEvent, ui, view ){
        $scope.$apply(function(){
          $scope.alertMessage = ('Event Resized to make dayDelta ' + minuteDelta);
        });
    };
     
    
    //this code will add new event and remove the event present on index
    //you can call it explicitly in any method
      $scope.events.push({
        title: 'New Task',
        start: new Date(y, m, 28),
        end: new Date(y, m, 29),
        className: ['newtask']
      });
     
    $scope.events.splice('index',1);
     
     
    //with this you can handle the click on the events
    $scope.eventClick = function(event){           
        $scope.$apply(function(){
          $scope.alertMessage = (event.title + ' is clicked');
        });
    };
     
     
    //with this you can handle the events that generated by each page render process
    $scope.renderView = function(view){    
        var date = new Date(view.calendar.getDate());
        $scope.currentDate = date.toDateString();
        $scope.$apply(function(){
          $scope.alertMessage = ('Page render with date '+ $scope.currentDate);
        });
    };
     
 
    //with this you can handle the events that generated when we change the view i.e. Month, Week and Day
    $scope.changeView = function(view,calendar) {
        currentView = view;
        calendar.fullCalendar('changeView', view);
        $scope.$apply(function(){
          $scope.alertMessage = ('You are looking at '+ currentView);
        });
    };
     
     
    /* config object */
    $scope.uiConfig = {
      calendar:{
        //height: 550,
        editable: false,
        header:{
         //left: 'month basicWeek basicDay agendaWeek agendaDay',
          left: 'month agendaWeek agendaDay',    
          center: 'title',
          right: 'today prev,next'
        },
        dayClick: $scope.dayClick,
        eventDrop: $scope.alertOnDrop,
        eventResize: $scope.alertOnResize,
        eventClick: $scope.eventClick,
        viewRender: $scope.renderView,
        timezone:'local',
        eventLimit: true, // allow "more" link when too many events
      }    
    };
     
    /* event sources array*/
    /*$scope.eventSources = [$scope.events, $scope.eventSource, $scope.eventsF];*/
    
    $scope.eventSources = [ /*$scope.events*/ {url:'/cal',}];
});


/*=========================================================================================================*/
var app3 = angular.module('myApp', ['ngRoute', 'ngMessages']);

app3.run(['$rootScope','$location', '$routeParams', function($rootScope, $location, $routeParams) {
    if (!window.console) window.console = {}; 
    if (!window.console.log) window.console.log = function () { };
    
  }]);

app.factory("user",function(){
        return {};
});

app3.factory('socket', function ($rootScope) {
  var socket = io.connect();
  return {
    on: function (eventName, callback) {
      socket.on(eventName, function () {  
        var args = arguments;
        $rootScope.$apply(function () {
          callback.apply(socket, args);
        });
      });
    },
    emit: function (eventName, data, callback) {
      socket.emit(eventName, data, function () {
        var args = arguments;
        $rootScope.$apply(function () {
          if (callback) {
            callback.apply(socket, args);
          }
        });
      })
    }
  };
});

//defines the rules and data available to the web page
//more efficient use of the server
app3.controller('data_get', function($scope, $http, socket){
//$scope.addTicket = function(ticket){socket.emit('add_ticket', ticket)};
//$scope.redirect = function(){window.location = "/MS.html";};    
$http.get('/DB/').success(function(data){$scope.data=data;});
})

app3.controller('data_event', function($scope, $http, socket, $routeParams){  
//$scope.updticket = function(event){socket.emit('update_event', event)};
//$scope.redirect = function(){location.reload();};    
$http.get('/event/'+$routeParams.id).success(function(data){$scope.x=data;});
$scope.fEventId = $routeParams.id;
$scope.fEventSo = $http.get('/event/'+$routeParams.id).success(function(data){$scope.s=data;});
       
});
/*=========================================================================================================*/
/*=======================================Maintenance=======================================================*/
var app4 = angular.module('Setup', ['ui.calendar','ngCookies']);

app4.controller('Setup', function($scope, $compile, uiCalendarConfig, $http, $cookieStore) {
//app.controller('CalendarCtrl',function($scope, $http) {
    $cookieStore.put("username", "Setup"); 
    var date = new Date();
    var d = date.getDate();
    var m = date.getMonth();
    var y = date.getFullYear();
    var currentView = "month";
     
    
    
    var auth = $cookieStore.get("username");
    if(auth != undefined && auth != ""){
            $scope.LoggedIn = "1";
            console.log("success!");
        }
        else{
            console.log("failure!");
        }
    
    $scope.events = [
     
    ];
    
    $scope.dayClick = function( event, date, allDay, jsEvent, view ){
        $scope.$apply(function(){
          $scope.alertMessage = ('Day Clicked ' + date);
        });
    };
     
     
    //with this you can handle the events that generated by droping any event to different position in the calendar
     $scope.alertOnDrop = function(event, dayDelta, minuteDelta, allDay, revertFunc, jsEvent, ui, view){
        $scope.$apply(function(){
          $scope.alertMessage = ('Event Droped to make dayDelta ' + dayDelta);
        });
    };
     
     
    //with this you can handle the events that generated by resizing any event to different position in the calendar
    $scope.alertOnResize = function(event, dayDelta, minuteDelta, revertFunc, jsEvent, ui, view ){
        $scope.$apply(function(){
          $scope.alertMessage = ('Event Resized to make dayDelta ' + minuteDelta);
        });
    };
     
    
    //this code will add new event and remove the event present on index
    //you can call it explicitly in any method
      $scope.events.push({
        title: 'New Task',
        start: new Date(y, m, 28),
        end: new Date(y, m, 29),
        className: ['newtask']
      });
     
    $scope.events.splice('index',1);
     
     
    //with this you can handle the click on the events
    $scope.eventClick = function(event){           
        $scope.$apply(function(){
          $scope.alertMessage = (event.title + ' is clicked');
        });
    };
     
     
    //with this you can handle the events that generated by each page render process
    $scope.renderView = function(view){    
        var date = new Date(view.calendar.getDate());
        $scope.currentDate = date.toDateString();
        $scope.$apply(function(){
          $scope.alertMessage = ('Page render with date '+ $scope.currentDate);
        });
    };
     
 
    //with this you can handle the events that generated when we change the view i.e. Month, Week and Day
    $scope.changeView = function(view,calendar) {
        currentView = view;
        calendar.fullCalendar('changeView', view);
        $scope.$apply(function(){
          $scope.alertMessage = ('You are looking at '+ currentView);
        });
    };
     
     
    /* config object */
    $scope.uiConfig = {
      calendar:{
        //height: 550,
        editable: true,
        header:{
         //left: 'month basicWeek basicDay agendaWeek agendaDay',
          left: 'month agendaWeek agendaDay',    
          center: 'title',
          right: 'today prev,next'
        },
        dayClick: $scope.dayClick,
        eventDrop: $scope.alertOnDrop,
        eventResize: $scope.alertOnResize,
        eventClick: $scope.eventClick,
        viewRender: $scope.renderView,
        timezone: 'local',
        //timezone: false,
        eventLimit: true, // allow "more" link when too many events
        //addEventSource: $scope.eventSources
      }    
    };
     
    /* event sources array*/
    /*$scope.eventSources = [$scope.events, $scope.eventSource, $scope.eventsF];*/
    
    $scope.eventSources = [/*$scope.events*/{url:'/DB3/'}];
});

